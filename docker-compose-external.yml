version: '3'

services:
  pgmaster:
    image: 127.0.0.1:5000/pgmaster
    build:
      context: PostDock/
      dockerfile: Postgres-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      PARTNER_NODES: "pgmaster,pgslave1,pgslave3"
      CLUSTER_NAME: pg_cluster
      NODE_ID: 1 # Integer number of node
      NODE_NAME: node1 # Node name
      CLUSTER_NODE_NETWORK_NAME: pgmaster
      NODE_PRIORITY: 100

      #database we want to use for application
      POSTGRES_PASSWORD: "dino.dev"
      POSTGRES_USER: postgres
      POSTGRES_DB: wmc_loyalty

      CONFIGS: "listen_addresses:'*'"
                  # in format variable1:value1[,variable2:value2[,...]]
                  # used for pgpool.conf file
      REPLICATION_DB: replication_db
      REPLICATION_USER: replication_user
      REPLICATION_PASSWORD: replication_pass
      SSH_ENABLE: 1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - 5452:5432

  pgslave1:
    image: 127.0.0.1:5000/pgslave1
    build:
      context: PostDock/
      dockerfile: Postgres-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      PARTNER_NODES: "pgmaster,pgslave1,pgslave3"
      REPLICATION_PRIMARY_HOST: pgmaster
      NODE_ID: 2
      NODE_NAME: node2
      CLUSTER_NODE_NETWORK_NAME: pgslave1 # (default: hostname of the node)
      SSH_ENABLE: 1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - 5441:5432

  # Add more slaves if required
  pgslave2:
    image: 127.0.0.1:5000/pgslave2
    build:
      context: PostDock/
      dockerfile: Postgres-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      REPLICATION_PRIMARY_HOST: pgslave1 # I want to have cascade Streeming replication
      NODE_ID: 3
      NODE_NAME: node3
      CLUSTER_NODE_NETWORK_NAME: pgslave2 # (default: hostname of the node)
      SSH_ENABLE: 1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - 5442:5432

  pgslave3:
    image: 127.0.0.1:5000/pgslave3
    build:
      context: PostDock/
      dockerfile: Postgres-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      PARTNER_NODES: "pgmaster,pgslave1,pgslave3"
      REPLICATION_PRIMARY_HOST: pgmaster
      NODE_ID: 4
      NODE_NAME: node4
      CLUSTER_NODE_NETWORK_NAME: pgslave3 # (default: hostname of the node)
      NODE_PRIORITY: 200  # (default: 100)
      SSH_ENABLE: 1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - 5443:5432
  pgslave4:
    image: 127.0.0.1:5000/pgslave4
    build:
      context: PostDock/
      dockerfile: Postgres-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      REPLICATION_PRIMARY_HOST: pgslave3
      NODE_ID: 5
      NODE_NAME: node5
      CLUSTER_NODE_NETWORK_NAME: pgslave4 # (default: hostname of the node)
      SSH_ENABLE: 1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - 5444:5432
  backup:
    image: 127.0.0.1:5000/backup
    build:
      context: PostDock/
      dockerfile: Barman-latest.Dockerfile
    deploy:
      placement:
        constraints:
          - node.hostname == APPTEAM-Ubuntu03
    volumes:
      - /backup:/var/backups 
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      REPLICATION_USER: replication_user # default is replication_user
      REPLICATION_PASSWORD: replication_pass # default is replication_pass
      REPLICATION_HOST: pgmaster
      POSTGRES_PASSWORD: "dino.dev"
      POSTGRES_USER: postgres
      POSTGRES_DB: wmc_loyalty
      SSH_ENABLE: 1
      BACKUP_SCHEDULE: "1 */2 * * *"

  pgpool:
    image: 127.0.0.1:5000/pgpool
    build:
      context: postgres-docker-cluster/
      dockerfile: Pgpool-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      PCP_USER: pcp_user
      PCP_PASSWORD: pcp_pass
      WAIT_BACKEND_TIMEOUT: 30

      CHECK_USER: postgres
      CHECK_PASSWORD: dino.dev
      CHECK_PGCONNECT_TIMEOUT: 3 #timout for checking if primary node is healthy

      DB_USERS: postgres:dino.dev # in format user:password[,user:password[...]]
      BACKENDS: "0:pgmaster:5432:1:/var/lib/postgresql/data:ALLOW_TO_FAILOVER,1:pgslave1::::,3:pgslave3::::,2:pgslave2::::" #,4:pgslaveDOES_NOT_EXIST::::
            # in format num:host:port:weight:data_directory:flag[,...]
            # defaults:
            #   port: 5432
            #   weight: 1
            #   data_directory: /var/lib/postgresql/data
            #   flag: ALLOW_TO_FAILOVER
      REQUIRE_MIN_BACKENDS: 3 # minimal number of backends to start pgpool (some might be unreachable)
      CONFIGS: "num_init_children:250,max_pool:4"
            # in format variable1:value1[,variable2:value2[,...]]
            # used for pgpool.conf file
    ports:
      - 5430:5432
      - 9898:9898 # PCP

  queue:
    image: rabbitmq:3-management
    container_name: wmc-queue-external
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "15672:15672"
      - "5672:5672"

  session:
    image: redis:alpine
    ports:
      - "6379:6379"

  app:
    working_dir: /var/wmc_loyalty
    # image: library/java
    volumes:
      - /home/dinosys/build:/var/wmc_loyalty
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    #   - ./build:/var/wmc_loyalty
    #   - ./wmcloyalty_backend/wmc-app/run.sh:/var/wmc-app.sh
    #   - ./log:/var/log/wmc-app
    #   - ./wait:/wait
    deploy:
      placement:
        constraints:
          - node.hostname == APPTEAM-Ubuntu02
    image: 127.0.0.1:5000/app
    build:
      context: .
      dockerfile: dockerfile-app
    command: ['/wait/wait-for-it.sh', 'pgpool:5432', '-t', '600', '--', '/var/wmc-app.sh']
    ports:
      - "8080:80"
    environment:
      spring.datasource.url: "jdbc:postgresql://pgpool:5432/wmc_loyalty"
      # spring.datasource.url: "jdbc:postgresql://pgmaster:5432/wmc_loyalty"
      spring.datasource.username: "postgres"
      spring.datasource.password: "dino.dev"
      spring.batch.initializer.enabled: "false"
      server.port: 80
      queues.posjob.host: queue
      spring.redis.host: "session"
      spring.redis.port: 6379
      spring.redis.password: ""
      # spring.session.store-type: redis
      spring.mvc.locale: en
      SERVICE_NAME: app
      SERVICE_TAGS: production
      #spring.datasource.hikari.maximum-pool-size: 40
      spring.datasource.hikari.maximum-pool-size: 10
      spring.datasource.hikari.minimum-idle: 1
      # spring.datasource.hikari.leak-detection-threshold: 5000
      spring.datasource.hikari.idle-timeout: 30000
      spring.datasource.hikari.connection-timeout: 60000
      spring.datasource.hikari.validation-timeout: 3000
      spring.datasource.hikari.max-lifetime: 600000
      wmc.pos.endpoint: http://192.168.1.235/wmcvip/MemberService.svc
    deploy:
      mode: replicated
      replicas: 1
      # placement:
        # https://docs.docker.com/engine/reference/commandline/service_create/#specify-service-constraints-constraint
        # constraints:
        #   - node.hostname != APPTEAM-Ubuntu
    depends_on:
      - pgpool
      - pgmaster
      - queue
      - session

  api:
    working_dir: /var/wmc_loyalty
    image: 127.0.0.1:5000/api
    build:
      context: .
      dockerfile: dockerfile-api
    command: ['/wait/wait-for-it.sh', 'pgpool:5432', '-t', '600', '--', '/var/wmc-api.sh']
    ports:
      - "8081:80"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      #ref: https://jdbc.postgresql.org/documentation/head/connect.html
      spring.datasource.url: "jdbc:postgresql://pgpool:5432/wmc_loyalty"
      # spring.datasource.url: "jdbc:postgresql://pgmaster:5432/wmc_loyalty"
      spring.datasource.username: "postgres"
      spring.datasource.password: "dino.dev"
      spring.batch.initializer.enabled: "false"
      server.port: 80
      spring.datasource.hikari.maximum-pool-size: 4
      # spring.datasource.hikari.leak-detection-threshold: 5000
      spring.datasource.hikari.idle-timeout: 600000
      spring.datasource.hikari.connection-timeout: 600000
      spring.datasource.hikari.validation-timeout: 3000
      spring.datasource.hikari.max-lifetime: 600000
      spring.datasource.test-while-idle: "true"
      spring.datasource.test-on-borrow: "true"
      spring.datasource.testOnBorrow: "true"
      spring.datasource.time-between-eviction-runs-millis: 25000
      spring.datasource.timeBetweenEvictionRunsMillis: 25000
      spring.datasource.validation-query: "SELECT 1"
      spring.datasource.validationQuery: "SELECT 1"
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      - pgpool
      - pgmaster
      - queue
