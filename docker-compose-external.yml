version: '3'

services:
  pgmaster:
    build:
      context: postgres-docker-cluster/
      dockerfile: Postgres-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      PARTNER_NODES: "pgmaster,pgslave1,pgslave3"
      CLUSTER_NAME: pg_cluster
      NODE_ID: 1 # Integer number of node
      NODE_NAME: node1 # Node name
      CLUSTER_NODE_NETWORK_NAME: pgmaster
      NODE_PRIORITY: 100

      #database we want to use for application
      POSTGRES_PASSWORD: "dino.dev"
      POSTGRES_USER: postgres
      POSTGRES_DB: wmc_loyalty

      CONFIGS: "listen_addresses:'*'"
                  # in format variable1:value1[,variable2:value2[,...]]
                  # used for pgpool.conf file
      REPLICATION_DB: replication_db
      REPLICATION_USER: replication_user
      REPLICATION_PASSWORD: replication_pass
    ports:
      - 5452:5432

  pgslave1:
    build:
      context: postgres-docker-cluster/
      dockerfile: Postgres-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      PARTNER_NODES: "pgmaster,pgslave1,pgslave3"
      REPLICATION_PRIMARY_HOST: pgmaster
      NODE_ID: 2
      NODE_NAME: node2
      CLUSTER_NODE_NETWORK_NAME: pgslave1 # (default: hostname of the node)
    ports:
      - 5441:5432

  # Add more slaves if required
  pgslave2:
    build:
      context: postgres-docker-cluster/
      dockerfile: Postgres-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      REPLICATION_PRIMARY_HOST: pgslave1 # I want to have cascade Streeming replication
      NODE_ID: 3
      NODE_NAME: node3
      CLUSTER_NODE_NETWORK_NAME: pgslave2 # (default: hostname of the node)
    ports:
      - 5442:5432

  pgslave3:
    build:
      context: postgres-docker-cluster/
      dockerfile: Postgres-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      PARTNER_NODES: "pgmaster,pgslave1,pgslave3"
      REPLICATION_PRIMARY_HOST: pgmaster
      NODE_ID: 4
      NODE_NAME: node4
      CLUSTER_NODE_NETWORK_NAME: pgslave3 # (default: hostname of the node)
      NODE_PRIORITY: 200  # (default: 100)
    ports:
      - 5443:5432
  pgslave4:
    build:
      context: postgres-docker-cluster/
      dockerfile: Postgres-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      REPLICATION_PRIMARY_HOST: pgslave3
      NODE_ID: 5
      NODE_NAME: node5
      CLUSTER_NODE_NETWORK_NAME: pgslave4 # (default: hostname of the node)
    ports:
      - 5444:5432

  pgpool:
    build:
      context: postgres-docker-cluster/
      dockerfile: Pgpool-latest.Dockerfile
    # image: paunin/postgresql-cluster-pgsql
    environment:
      PCP_USER: pcp_user
      PCP_PASSWORD: pcp_pass
      WAIT_BACKEND_TIMEOUT: 30

      CHECK_USER: postgres
      CHECK_PASSWORD: dino.dev
      CHECK_PGCONNECT_TIMEOUT: 3 #timout for checking if primary node is healthy

      DB_USERS: postgres:dino.dev # in format user:password[,user:password[...]]
      BACKENDS: "0:pgmaster:5432:1:/var/lib/postgresql/data:ALLOW_TO_FAILOVER,1:pgslave1::::,3:pgslave3::::,2:pgslave2::::" #,4:pgslaveDOES_NOT_EXIST::::
            # in format num:host:port:weight:data_directory:flag[,...]
            # defaults:
            #   port: 5432
            #   weight: 1
            #   data_directory: /var/lib/postgresql/data
            #   flag: ALLOW_TO_FAILOVER
      REQUIRE_MIN_BACKENDS: 3 # minimal number of backends to start pgpool (some might be unreachable)
      CONFIGS: "num_init_children:250,max_pool:4"
            # in format variable1:value1[,variable2:value2[,...]]
            # used for pgpool.conf file
    ports:
      - 5430:5432
      - 9898:9898 # PCP

  queue:
    image: rabbitmq:3-management
    container_name: wmc-queue-external
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "${DOCKER_QUEUE_EXTERNAL_MANAGER_PORT}:15672"
      - "${DOCKER_QUEUE_EXTERNAL_PORT}:5672"

  session:
    image: redis:alpine
    ports:
      - "6379:6379"

  app:
    working_dir: /var/wmc_loyalty
    image: library/java
    volumes:
      - ./build:/var/wmc_loyalty
      - ./wmcloyalty_backend/wmc-app/run.sh:/var/wmc-app.sh
      - ./log:/var/log/wmc-app
      - ./wait:/wait
    command: ['/wait/wait-for-it.sh', 'pgpool:5432', '-t', '600', '--', '/var/wmc-app.sh']
    ports:
      - "80"
    environment:
      spring.datasource.url: "jdbc:postgresql://pgpool:5432/wmc_loyalty"
      spring.datasource.username: "postgres"
      spring.datasource.password: "dino.dev"
      spring.batch.initializer.enabled: "false"
      server.port: 80
      queues.posjob.host: queue
      spring.redis.host: "session"
      spring.redis.port: 6379
      spring.redis.password: ""
      spring.session.store-type: redis
      spring.mvc.locale: en
      SERVICE_NAME: app
      SERVICE_TAGS: production
    depends_on:
      - pgpool
      - pgmaster
      - queue
      - session
#   proxy:
#     image: nginx
#     ports:
#       - "80:80"
#     volumes:
#       - "./nginx/nginx.conf:/etc/nginx/nginx.conf"
#     links:
#       - app
  lb:
    build:
      context: docker-nginx-lb/
    image: consul-template-nginx
    depends_on:
      - app
    ports:
      - "80:80"
  consul:
    image: gliderlabs/consul-server:latest
    command: -bootstrap
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
      - "8600:53/udp"
  registrator:
    image: gliderlabs/registrator:master
    depends_on:
      - consul
    command: -internal -resync 600 consul://consul:8500
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"


  # api:
  #   working_dir: /var/wmc_loyalty
  #   image: library/java
  #   volumes:
  #     - ./build:/var/wmc_loyalty
  #     - ./wmcloyalty_backend/wmc-api/run.sh:/var/wmc-api.sh
  #     - ./log:/var/log/wmc-api
  #     - ./wait:/wait
  #   command: ['/wait/wait-for-it.sh', 'pgpool:5432', '-t', '600', '--', '/var/wmc-api.sh']
  #   ports:
  #     - "8082:80"
  #   environment:
  #     # ref: https://jdbc.postgresql.org/documentation/head/connect.html
  #     spring.datasource.url: "jdbc:postgresql://pgpool:5432/wmc_loyalty"
  #     spring.datasource.username: "postgres"
  #     spring.datasource.password: "dino.dev"
  #     spring.batch.initializer.enabled: "false"
  #     server.port: 80
  #     queues.posjob.host: queue
  #   depends_on:
  #     - pgpool
  #     - pgmaster
  #     - queue
